from aiogram.fsm.state import StatesGroup, State
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta

class PeriodCalendarFSM(StatesGroup):
    waiting_for_start = State()
    waiting_for_end = State()

class DayCalendarFSM(StatesGroup):
    choosing_day = State()

def get_simple_calendar():
    return SimpleCalendar(locale="ru")

def cancel_keyboard(cancel_callback):
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_callback)]]
    )

def quick_periods_keyboard():
    return [[
        InlineKeyboardButton(text="üóì 7 –¥–Ω–µ–π", callback_data="quick_period_7"),
        InlineKeyboardButton(text="üóì 30 –¥–Ω–µ–π", callback_data="quick_period_30"),
        InlineKeyboardButton(text="üóì –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="quick_period_month"),
    ]]

# === –ö–∞–ª–µ–Ω–¥–∞—Ä—å "–ü–µ—Ä–∏–æ–¥" ===
async def start_period_calendar(callback, state, period_context: dict = None, on_finish=None):
    await state.set_state(PeriodCalendarFSM.waiting_for_start)
    if period_context:
        await state.update_data(**period_context)
    await state.update_data(on_finish=on_finish)
    calendar = get_simple_calendar()
    kb = await calendar.start_calendar()
    kb.inline_keyboard = quick_periods_keyboard() + kb.inline_keyboard
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="period_calendar_cancel")])
    await callback.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞:</b>\n–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±—ã—Å—Ç—Ä—ã–º –≤—ã–±–æ—Ä–æ–º üëá",
        reply_markup=kb, parse_mode="HTML"
    )

async def period_select_start(callback, callback_data: SimpleCalendarCallback, state):
    calendar = get_simple_calendar()
    is_selected, start_date = await calendar.process_selection(callback, callback_data)
    if is_selected:
        await state.update_data(period_start=start_date)
        await state.set_state(PeriodCalendarFSM.waiting_for_end)
        kb = await calendar.start_calendar()
        kb.inline_keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="period_calendar_cancel")])
        await callback.message.edit_text(
            f"‚úÖ <b>–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞:</b> <code>{start_date.strftime('%d.%m.%Y')}</code>\n<b>–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—Ü.</b>",
            reply_markup=kb,
            parse_mode="HTML"
        )

async def period_select_end(callback, callback_data: SimpleCalendarCallback, state):
    calendar = get_simple_calendar()
    is_selected, end_date = await calendar.process_selection(callback, callback_data)
    if is_selected:
        data = await state.get_data()
        start_date = data.get("period_start")
        on_finish = data.get("on_finish")
        if end_date < start_date:
            await callback.message.answer("‚ö†Ô∏è –ö–æ–Ω–µ—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞.")
            return await start_period_calendar(callback, state, on_finish=on_finish)
        await callback.message.edit_text(
            f"‚úÖ <b>–í—ã–±—Ä–∞–Ω–æ:</b> <code>{start_date.strftime('%d.%m.%Y')}</code> ‚Äî <code>{end_date.strftime('%d.%m.%Y')}</code>\n‚è≥ –ì–æ—Ç–æ–≤–∏–º...",
            parse_mode="HTML"
        )
        if on_finish:
            await on_finish(callback, state, start_date, end_date)

# === –ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–∏–æ–¥—ã ===
async def quick_period_handler(callback, state, days: int = None, this_month: bool = False):
    date_to = datetime.now().date()
    if this_month:
        date_from = date_to.replace(day=1)
    elif days:
        date_from = date_to - timedelta(days=days)
    else:
        date_from = date_to - timedelta(days=7)
    data = await state.get_data()
    on_finish = data.get("on_finish")
    await callback.message.edit_text(
        f"‚úÖ <b>–í—ã–±—Ä–∞–Ω–æ:</b> <code>{date_from.strftime('%d.%m.%Y')}</code> ‚Äî <code>{date_to.strftime('%d.%m.%Y')}</code>\n‚è≥ –ì–æ—Ç–æ–≤–∏–º...",
        parse_mode="HTML"
    )
    if on_finish:
        await on_finish(callback, state, date_from, date_to)

# === –ö–∞–ª–µ–Ω–¥–∞—Ä—å "–û–¥–∏–Ω –¥–µ–Ω—å" ===
async def start_day_calendar(callback, state, context: dict = None, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", on_finish=None):
    await state.set_state(DayCalendarFSM.choosing_day)
    if context:
        await state.update_data(**context)
    await state.update_data(on_finish=on_finish)
    calendar = get_simple_calendar()
    kb = await calendar.start_calendar()
    today = datetime.now().date().isoformat()
    kb.inline_keyboard.insert(0, [InlineKeyboardButton(text="üóì –°–µ–≥–æ–¥–Ω—è", callback_data=f"calendar:{today}")])
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="calendar_day_cancel")])
    await callback.message.edit_text(f"üóì <b>{text}</b>", reply_markup=kb, parse_mode="HTML")

async def day_selected(callback, callback_data, state):
    calendar = get_simple_calendar()
    is_selected, date = await calendar.process_selection(callback, callback_data)
    data = await state.get_data()
    on_finish = data.get("on_finish")
    if is_selected:
        await callback.message.edit_text(f"‚úÖ <b>–î–∞—Ç–∞:</b> <code>{date.strftime('%d.%m.%Y')}</code>\n‚è≥ –ì–æ—Ç–æ–≤–∏–º...", parse_mode="HTML")
        if on_finish:
            await on_finish(callback, state, date, date)
def remove_builtin_calendar_buttons(kb):
    # –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –≤ –Ω–µ–π –µ—Å—Ç—å Cancel, Today –∏–ª–∏ –ø—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞
    if kb.inline_keyboard and len(kb.inline_keyboard) > 0:
        new_keyboard = []
        for row in kb.inline_keyboard:
            if not any(btn.text in ["Cancel", "Today", None, ""] for btn in row if hasattr(btn, 'text')):
                new_keyboard.append(row)
        kb.inline_keyboard = new_keyboard
    return kb
