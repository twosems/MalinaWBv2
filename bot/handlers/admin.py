"""
bot/handlers/admin.py

–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞:
- –†–∞–∑–¥–µ–ª—ã: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –û–±—â–µ–µ
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–Ω–æ–ø–∫–∞–º–∏, –¥–µ–π—Å—Ç–≤–∏—è (–±–∞–ª–∞–Ω—Å, –±–ª–æ–∫, –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∏–∞–ª, —É–¥–∞–ª–∏—Ç—å, –∏–Ω—Ñ–æ)
- –û–±—â–µ–µ: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤, –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–µ—à–∞ —Å–∫–ª–∞–¥–æ–≤
- –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∞—Ö, –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (ADMINS)
"""

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import ADMINS
from storage.db import AsyncSessionLocal
from storage.models import UserAccess
from storage.users import add_balance, get_user_access, get_admin_token
from storage.warehouses import cache_warehouses, get_cache_update_info
from bot.handlers.api_entry import get_warehouses  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ WB API
from sqlalchemy import select, update, delete
import logging
from bot.services.wildberries_api import fetch_warehouses_from_api
router = Router()

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

def back_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_common")]]
    )

# --- –ì–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é ---
@router.message((F.text == "üõ†Ô∏è –ê–¥–º–∏–Ω–∫–∞") | (F.text == "/admin"))
async def admin_menu(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton(text="‚öôÔ∏è –û–±—â–µ–µ", callback_data="admin_common")]
        ]
    )
    await message.answer("–ê–¥–º–∏–Ω–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)

# --- –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(UserAccess.user_id))
        users = [str(row[0]) for row in result.fetchall()][:20]

    if not users:
        await callback.message.edit_text("–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=back_keyboard())
        await callback.answer()
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
                            [InlineKeyboardButton(text=f"üë§ {uid}", callback_data=f"admin_user_{uid}")] for uid in users
                        ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
    await callback.answer()

# --- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
@router.callback_query(F.data.startswith("admin_user_"))
async def admin_user_actions(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    user_id = int(callback.data.replace("admin_user_", ""))
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_addmoney_{user_id}")],
            [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_ban_{user_id}")],
            [InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_unban_{user_id}")],
            [InlineKeyboardButton(text="‚ùå –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∏–∞–ª", callback_data=f"admin_canceltrial_{user_id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_del_{user_id}")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data=f"admin_info_{user_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ]
    )
    await callback.message.edit_text(
        f"–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_id}</b>:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

# --- –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø ---
@router.callback_query(F.data.startswith("admin_canceltrial_"))
async def admin_cancel_trial(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    user_id = int(callback.data.replace("admin_canceltrial_", ""))
    async with AsyncSessionLocal() as session:
        await session.execute(
            update(UserAccess)
            .where(UserAccess.user_id == user_id)
            .values(trial_activated=False, trial_until=None, paid_until=None)
        )
        await session.commit()
    await callback.message.edit_text(
        f"‚ùå –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_id}</b> –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_user_{user_id}")]
        ])
    )
    await callback.answer()

# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ---
@router.callback_query(F.data.startswith("admin_info_"))
async def admin_info(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    user_id = int(callback.data.replace("admin_info_", ""))
    access = await get_user_access(user_id)
    if not access:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_keyboard())
        await callback.answer()
        return
    text = (
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}</b>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <code>{getattr(access, 'balance', 0)}‚ÇΩ</code>\n"
        f"–ü–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ: <code>{access.paid_until}</code>\n"
        f"–ü—Ä–æ–±–Ω—ã–π –¥–æ: <code>{access.trial_until}</code>\n"
        f"–ü—Ä–æ–±–Ω—ã–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: <code>{access.trial_activated}</code>\n"
        f"API –∫–ª—é—á: <code>{access.api_key if access.api_key else '-'}</code>"
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_user_{user_id}")]
        ]
    )
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É (–æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ) ---
class AddMoneyStates(StatesGroup):
    waiting_amount = State()
    target_user_id = State()

@router.callback_query(F.data.startswith("admin_addmoney_"))
async def ask_add_money(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    user_id = int(callback.data.replace("admin_addmoney_", ""))
    await state.update_data(target_user_id=user_id)
    await state.set_state(AddMoneyStates.waiting_amount)
    await callback.message.edit_text(
        f"–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_id}</b>?\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>+399</code> –∏–ª–∏ <code>-13</code>):",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_user_{user_id}")]
        ])
    )
    await callback.answer()

@router.message(AddMoneyStates.waiting_amount)
async def process_add_money(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("target_user_id")
    try:
        amount = int(message.text.replace('+', '').replace(' ', ''))
        await add_balance(user_id, amount)
        access = await get_user_access(user_id)
        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_id}</b> –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {amount:+}‚ÇΩ.\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{getattr(access, 'balance', 0)}‚ÇΩ</b>",
            parse_mode="HTML",
        )
        await state.clear()
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>+399</code> –∏–ª–∏ <code>-13</code>):", parse_mode="HTML")

# --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@router.callback_query(F.data.startswith("admin_ban_"))
async def admin_ban(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    user_id = int(callback.data.replace("admin_ban_", ""))
    async with AsyncSessionLocal() as session:
        await session.execute(
            update(UserAccess)
            .where(UserAccess.user_id == user_id)
            .values(trial_activated=True, paid_until=None, trial_until=None)
        )
        await session.commit()
    await callback.message.edit_text(
        f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–¥–æ—Å—Ç—É–ø –æ–±–Ω—É–ª—ë–Ω).",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_user_{user_id}")]
        ])
    )
    await callback.answer()

# --- –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@router.callback_query(F.data.startswith("admin_unban_"))
async def admin_unban(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    user_id = int(callback.data.replace("admin_unban_", ""))
    async with AsyncSessionLocal() as session:
        await session.execute(
            update(UserAccess)
            .where(UserAccess.user_id == user_id)
            .values(trial_activated=False, paid_until=None, trial_until=None)
        )
        await session.commit()
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø).",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_user_{user_id}")]
        ])
    )
    await callback.answer()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@router.callback_query(F.data.startswith("admin_del_"))
async def admin_del(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    user_id = int(callback.data.replace("admin_del_", ""))
    async with AsyncSessionLocal() as session:
        await session.execute(
            delete(UserAccess).where(UserAccess.user_id == user_id)
        )
        await session.commit()
    await callback.message.edit_text(
        f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_users")]
        ])
    )
    await callback.answer()

# --- –ú–µ–Ω—é –æ–±—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π ---
@router.callback_query(F.data == "admin_common")
async def admin_common(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–∫–ª–∞–¥—ã", callback_data="admin_update_warehouses")],
            [InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–µ—à–∞ —Å–∫–ª–∞–¥–æ–≤", callback_data="admin_view_warehouses_cache")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )
    await callback.message.edit_text("–û–±—â–∏–µ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏:", reply_markup=keyboard)
    await callback.answer()

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤ ---
@router.callback_query(F.data == "admin_view_warehouses_cache")
async def admin_view_warehouses_cache(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    info = await get_cache_update_info()
    if info:
        updated_at_str = info.updated_at.strftime('%d.%m.%Y %H:%M:%S')
        updated_by_str = str(info.updated_by) if info.updated_by else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        text = (
            f"<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ —Å–∫–ª–∞–¥–æ–≤:</b> {updated_at_str}\n"
            f"<b>–û–±–Ω–æ–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (user_id):</b> {updated_by_str}"
        )
    else:
        text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=back_keyboard())
    await callback.answer()


@router.callback_query(F.data == "admin_update_warehouses")
async def admin_update_warehouses(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    api_key = await get_admin_token()
    logging.info(f"Admin API key: {api_key}")
    if not api_key:
        await callback.message.edit_text(
            "‚ùå –£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π API-–∫–ª—é—á –¥–ª—è Wildberries.",
            reply_markup=back_keyboard()
        )
        await callback.answer()
        return

    await callback.message.edit_text("‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å Wildberries...")

    try:
        warehouses = await fetch_warehouses_from_api(api_key)
        if warehouses:
            logging.info(f"[WAREHOUSES] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ —Å–∫–ª–∞–¥–æ–≤ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ user_id={callback.from_user.id}")
            await cache_warehouses(warehouses, updated_by=callback.from_user.id)
            info = await get_cache_update_info()
            updated_at_str = info.updated_at.strftime('%d.%m.%Y %H:%M:%S') if info else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            updated_by_str = str(info.updated_by) if info and info.updated_by else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            await callback.message.edit_text(
                f"‚úÖ –°–∫–ª–∞–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {updated_at_str}\n"
                f"–û–±–Ω–æ–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {updated_by_str}",
                reply_markup=back_keyboard()
            )
        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å Wildberries.", reply_markup=back_keyboard())
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {e}", reply_markup=back_keyboard())
    await callback.answer()

# --- –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é "–û–±—â–µ–µ" ---
@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    await admin_menu(callback.message)
    await callback.answer()