"""
bot/handlers/admin.py

–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞:
- –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–Ω–æ–ø–∫–∞–º–∏
- –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ–±–∞–≤–∏—Ç—å –¥–Ω–µ–π, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª–∏—Ç—å, –∏–Ω—Ñ–æ
- –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∞—Ö, –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (ADMINS)
"""

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import ADMINS
from storage.db import AsyncSessionLocal
from storage.models import UserAccess
from storage.users import add_paid_days, get_user_access
from sqlalchemy.future import select
from sqlalchemy import update, delete

router = Router()

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

# --- –ì–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é (—Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) ---
@router.message((F.text == "üõ†Ô∏è –ê–¥–º–∏–Ω–∫–∞") | (F.text == "/admin"))
async def admin_menu(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ user_id (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ, —Å–µ–π—á–∞—Å –≤—ã–≤–æ–¥–∏–º –¥–æ 20)
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(UserAccess.user_id))
        users = [str(row[0]) for row in result.fetchall()][:20]

    if not users:
        await message.answer("–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"üë§ {uid}", callback_data=f"admin_user_{uid}")]
            for uid in users
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)

# --- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
@router.callback_query(F.data.startswith("admin_user_"))
async def admin_user_actions(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    user_id = int(callback.data.replace("admin_user_", ""))
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–Ω–µ–π", callback_data=f"admin_adddays_{user_id}")],
            [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_ban_{user_id}")],
            [InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_unban_{user_id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_del_{user_id}")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data=f"admin_info_{user_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )
    await callback.message.edit_text(
        f"–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_id}</b>:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ---
@router.callback_query(F.data.startswith("admin_info_"))
async def admin_info(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    user_id = int(callback.data.replace("admin_info_", ""))
    access = await get_user_access(user_id)
    if not access:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    text = (
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}</b>\n"
        f"–ü–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ: <code>{access.paid_until}</code>\n"
        f"–ü—Ä–æ–±–Ω—ã–π –¥–æ: <code>{access.trial_until}</code>\n"
        f"–ü—Ä–æ–±–Ω—ã–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: <code>{access.trial_activated}</code>\n"
        f"API –∫–ª—é—á: <code>{access.api_key if access.api_key else '-'}</code>"
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_user_{user_id}")]
        ]
    )
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

# --- –î–æ–±–∞–≤–∏—Ç—å –¥–Ω–µ–π: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π (–æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ) ---
class AddDaysStates(StatesGroup):
    waiting_days = State()
    target_user_id = State()

@router.callback_query(F.data.startswith("admin_adddays_"))
async def ask_add_days(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    user_id = int(callback.data.replace("admin_adddays_", ""))
    await state.update_data(target_user_id=user_id)
    await state.set_state(AddDaysStates.waiting_days)
    await callback.message.edit_text(
        f"–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{user_id}</b>? (1-30)",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_user_{user_id}")]
        ])
    )
    await callback.answer()

@router.message(AddDaysStates.waiting_days)
async def process_add_days(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("target_user_id")
    try:
        days = int(message.text)
        if days < 1 or days > 30:
            await message.answer("–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç 1 –¥–æ 30 –¥–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        success = await add_paid_days(user_id, days)
        if success:
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {days} –¥–Ω–µ–π –ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.",
            )
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π (–æ—Ç 1 –¥–æ 30):")

# --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@router.callback_query(F.data.startswith("admin_ban_"))
async def admin_ban(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    user_id = int(callback.data.replace("admin_ban_", ""))
    async with AsyncSessionLocal() as session:
        await session.execute(
            update(UserAccess)
            .where(UserAccess.user_id == user_id)
            .values(trial_activated=True, paid_until=None, trial_until=None)
        )
        await session.commit()
    await callback.message.edit_text(
        f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–¥–æ—Å—Ç—É–ø –æ–±–Ω—É–ª—ë–Ω).",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_user_{user_id}")]
        ])
    )
    await callback.answer()

# --- –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@router.callback_query(F.data.startswith("admin_unban_"))
async def admin_unban(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    user_id = int(callback.data.replace("admin_unban_", ""))
    async with AsyncSessionLocal() as session:
        await session.execute(
            update(UserAccess)
            .where(UserAccess.user_id == user_id)
            .values(trial_activated=False, paid_until=None, trial_until=None)
        )
        await session.commit()
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø).",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_user_{user_id}")]
        ])
    )
    await callback.answer()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@router.callback_query(F.data.startswith("admin_del_"))
async def admin_del(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    user_id = int(callback.data.replace("admin_del_", ""))
    async with AsyncSessionLocal() as session:
        await session.execute(
            delete(UserAccess).where(UserAccess.user_id == user_id)
        )
        await session.commit()
    await callback.message.edit_text(
        f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_back")]
        ])
    )
    await callback.answer()

# --- –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    await admin_menu(callback.message)
    await callback.answer()
