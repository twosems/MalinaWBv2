import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta

from bot.keyboards.keyboards import guest_menu, access_menu_keyboard
from storage.users import (
    get_user_access, create_user_access, set_trial_access, get_user_api_key,
    find_user_by_seller_name, find_archived_user_by_seller_name, update_user_id_by_seller_name
)

router = Router()

@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    logging.info(f"[DEBUG USER_ID] /start: user_id={message.from_user.id}")
    await state.clear()
    await message.answer(
        "ü§ñ <b>MalinaWB ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ Wildberries!</b>\n\n"
        "üîπ <b>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤</b>\n"
        "üîπ <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        "üîπ <b>–£–ø—Ä–æ—â–µ–Ω–∏–µ —Ä—É—Ç–∏–Ω—ã</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b>, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞ üëá",
        reply_markup=guest_menu(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "guest_continue")
async def guest_continue(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    now = datetime.utcnow()
    access = await get_user_access(user_id)

    menu_type = None
    trial_active = False
    paid_active = False
    has_balance = False

    if access:
        is_archived = getattr(access, "is_archived", False)
        trial_active = access.trial_until and access.trial_until > now
        paid_active = access.paid_until and access.paid_until > now
        has_balance = paid_active or trial_active

        # 1. –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–¥–ø–∏—Å–∫–æ–π ‚Äî —Å—Ä–∞–∑—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        if not is_archived and (paid_active or trial_active):
            from bot.handlers.main_menu import main_menu
            await callback.message.delete()
            await main_menu(callback.message, user_id=user_id)
            return

        # 2. –ê—Ä—Ö–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        if is_archived:
            if has_balance:
                menu_type = "restore"
            else:
                menu_type = "only_pay"
        # 3. –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –±–µ–∑ –±–∞–ª–∞–Ω—Å–∞
        else:
            menu_type = "only_pay" if not has_balance else "restore"
    else:
        # 4. –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await create_user_access(user_id)
        menu_type = "new"

    await callback.message.delete()
    if menu_type == "new":
        await callback.message.answer(
            "üîí –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø:\n"
            "‚Äî –ü—Ä–æ–±–Ω—ã–π 1 –¥–µ–Ω—å (–æ–¥–∏–Ω —Ä–∞–∑)\n"
            "‚Äî –ò–ª–∏ –∫—É–ø–∏—Ç—å –º–µ—Å—è—Ü –∑–∞ 399‚ÇΩ\n",
            reply_markup=access_menu_keyboard(show_trial=True, can_restore=False)
        )
    elif menu_type == "restore":
        await callback.message.answer(
            "üîí –£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ.",
            reply_markup=access_menu_keyboard(show_trial=False, can_restore=True)
        )
    elif menu_type == "only_pay":
        await callback.message.answer(
            "üîí –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø. –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø.",
            reply_markup=access_menu_keyboard(show_trial=False, can_restore=False)
        )

# ---------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö –í –ú–ï–ù–Æ –î–û–°–¢–£–ü–ê ----------

@router.callback_query(F.data == "trial")
async def activate_trial(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logging.info(f"[DEBUG USER_ID] activate_trial: user_id={user_id}")
    now = datetime.utcnow()
    trial_period = timedelta(days=1)
    await set_trial_access(user_id, now + trial_period)
    await callback.message.delete()
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É API-–∫–ª—é—á–∞


@router.callback_query(F.data == "restore_account")
async def restore_account(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    from bot.handlers.api_entry import ask_restore_access
    await ask_restore_access(callback, state)


@router.callback_query(F.data == "buy")
async def buy_access(callback: CallbackQuery):
    await callback.answer(
        "üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤—Ä—É—á–Ω—É—é.",
        show_alert=True
    )

@router.callback_query(F.data == "back_to_greeting")
async def back_to_greeting(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await cmd_start(callback.message, state)
    await callback.answer()
