from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from bot.keyboards.keyboards import guest_menu, access_menu_keyboard
from storage.users import get_user_access, create_user_access, set_trial_access, get_user_api_key

import logging  # –î–ª—è –ª–æ–≥–æ–≤

router = Router()

@router.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer(
        "ü§ñ <b>MalinaWB ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ Wildberries!</b>\n\n"
        "üîπ <b>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤</b> ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π\n"
        "üîπ <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> ‚Äî –≤—Å–µ–≥–¥–∞ –¥–µ—Ä–∂–∏—Ç–µ —Ä—É–∫—É –Ω–∞ –ø—É–ª—å—Å–µ –±–∏–∑–Ω–µ—Å–∞\n"
        "üîπ <b>–£–ø—Ä–æ—â–µ–Ω–∏–µ —Ä—É—Ç–∏–Ω—ã</b> ‚Äî —ç–∫–æ–Ω–æ–º—å—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –≤–∞–∂–Ω–æ–º!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b>, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞ üëá",
        reply_markup=guest_menu(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "guest_continue")
async def guest_continue(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    access = await get_user_access(user_id)
    now = datetime.utcnow()

    # --- –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ access ---
    logging.info(f"[DEBUG access] {access.__dict__ if access else None}")
    if access:
        logging.info(
            f"[DEBUG fields] user_id={user_id} "
            f"trial_activated={access.trial_activated}, trial_until={access.trial_until}, paid_until={access.paid_until}"
        )
        # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî —É–¥–∞–ª–∏ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞!
        await callback.message.answer(
            f"<b>DEBUG:</b>\n"
            f"trial_activated: <code>{access.trial_activated}</code>\n"
            f"trial_until: <code>{access.trial_until}</code>\n"
            f"paid_until: <code>{access.paid_until}</code>",
            parse_mode="HTML"
        )

    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
    if not access:
        await create_user_access(user_id)
        access = await get_user_access(user_id)

    api_key = await get_user_api_key(user_id)

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ---
    trial_active = (
            access
            and bool(access.trial_activated)
            and access.trial_until
            and access.trial_until > now
    )
    paid_active = (
            access
            and access.paid_until
            and access.paid_until > now
    )

    if trial_active or paid_active:
        if not api_key:
            from bot.handlers.profile import ask_for_api_key
            await callback.message.delete()
            await ask_for_api_key(callback.message, state)
            return
        else:
            from bot.handlers.main_menu import main_menu
            await callback.message.delete()
            await main_menu(callback.message)
            return

    # --- –ï—Å–ª–∏ —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏ ‚Äî –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ---
    trial_expired = (
            access
            and bool(access.trial_activated)
            and access.trial_until
            and access.trial_until <= now
    )
    show_trial = not (access and access.trial_activated)

    await callback.message.delete()
    await callback.message.answer(
        "üîí –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø:\n"
        "‚Äî –ü—Ä–æ–±–Ω—ã–π 1 –¥–µ–Ω—å (–æ–¥–∏–Ω —Ä–∞–∑)\n"
        "‚Äî –ò–ª–∏ –∫—É–ø–∏—Ç—å –º–µ—Å—è—Ü –∑–∞ 399‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:",
        reply_markup=access_menu_keyboard(trial_active, trial_expired, show_trial=show_trial)
    )

@router.callback_query(F.data == "trial")
async def activate_trial(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    now = datetime.utcnow()
    trial_period = timedelta(days=1)  # –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –¥–µ–Ω—å
    await set_trial_access(user_id, now + trial_period)
    await callback.message.delete()
    await callback.answer()
    from bot.handlers.profile import ask_for_api_key
    await ask_for_api_key(callback.message, state)

@router.callback_query(F.data == "buy")
async def buy_access(callback: CallbackQuery):
    await callback.answer(
        "üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤—Ä—É—á–Ω—É—é.",
        show_alert=True
    )

@router.callback_query(F.data == "trial_disabled")
async def trial_disabled(callback: CallbackQuery):
    await callback.answer("–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", show_alert=True)

@router.callback_query(F.data == "back_to_greeting")
async def back_to_greeting(callback: CallbackQuery):
    await callback.message.delete()
    await cmd_start(callback.message)
    await callback.answer()
