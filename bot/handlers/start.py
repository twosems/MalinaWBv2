"""
bot/handlers/start.py

–°—Ç–∞—Ä—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:
- /start –∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–ª—å–∫–æ –∑–∞ —Ä–µ–∞–ª—å–Ω–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –¥–Ω–∏ (–±–∞–ª–∞–Ω—Å –Ω–µ —É—Ö–æ–¥–∏—Ç –≤ –º–∏–Ω—É—Å)
- –ú–µ–Ω—é –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –æ–ø–ª–∞—Ç–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from bot.keyboards.keyboards import blocked_menu_keyboard
from bot.keyboards.keyboards import guest_menu, access_menu_keyboard

from storage.users import (
    get_user_access, create_user_access, set_trial_access, get_user_api_key,
    find_user_by_seller_name, find_archived_user_by_seller_name, update_user_id_by_seller_name,
    update_balance_on_access,
    has_active_access
)

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ —Å–∫–ª–∞–¥–æ–≤ ---
from storage.warehouses import need_update_warehouses_cache, cache_warehouses
from bot.services.wildberries_api import fetch_warehouses_from_api




router = Router()

@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    logging.info(f"[DEBUG USER_ID] /start: user_id={message.from_user.id}")
    await state.clear()
    user_id = message.from_user.id

    # –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å (—Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –¥–Ω–∏, –º–∏–Ω—É—Å–∞ –Ω–µ –±—ã–≤–∞–µ—Ç)
    await update_balance_on_access(user_id)

    # ----------- –ì–õ–û–ë–ê–õ–¨–ù–û–ï –ö–ï–®–ò–†–û–í–ê–ù–ò–ï –°–ö–õ–ê–î–û–í -----------
    try:
        if await need_update_warehouses_cache():
            api_key = await get_user_api_key(user_id)
            if api_key:
                warehouses = await fetch_warehouses_from_api(api_key)
                if warehouses:
                    await cache_warehouses(warehouses, updated_by=user_id)
                    logging.info(f"[WAREHOUSES] –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                else:
                    logging.warning(f"[WAREHOUSES] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ API (user_id={user_id})")
            else:
                logging.warning(f"[WAREHOUSES] –ù–µ—Ç API-–∫–ª—é—á–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞")
        else:
            logging.info("[WAREHOUSES] –ö—ç—à —Å–∫–ª–∞–¥–æ–≤ –∞–∫—Ç—É–∞–ª–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    except Exception as e:
        logging.error(f"[WAREHOUSES] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤: {e}")
    # -----------------------------------------------------

    await message.answer(
        "ü§ñ <b>MalinaWB ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ Wildberries!</b>\n\n"
        "üîπ <b>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤</b>\n"
        "üîπ <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        "üîπ <b>–£–ø—Ä–æ—â–µ–Ω–∏–µ —Ä—É—Ç–∏–Ω—ã</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b>, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞ üëá",
        reply_markup=guest_menu(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "guest_continue")
async def guest_continue(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    await update_balance_on_access(user_id)
    access = await get_user_access(user_id)
    now = datetime.utcnow()

    is_archived = getattr(access, "is_archived", False) if access else False
    balance = getattr(access, "balance", 0) if access else 0
    trial_activated = getattr(access, "trial_activated", False) if access else False
    trial_until = getattr(access, "trial_until", None) if access else None
    in_trial = trial_activated and trial_until and now <= trial_until
    trial_expired = (not in_trial) and (trial_activated or trial_until)

    # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–æ—Å—Ç—É–ø–∞
    if access and not is_archived and (balance > 0 or in_trial):
        from bot.handlers.main_menu import main_menu
        await callback.message.delete()
        await main_menu(callback.message, user_id=user_id)
        return

    menu_type = None

    if access:
        if is_archived:
            menu_type = "restore" if balance > 0 else "only_pay"
        elif in_trial:
            menu_type = None
        elif balance == 0 and not in_trial and not is_archived:
            # –í–ê–ñ–ù–û: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ø–ª–∞—Ç–Ω—ã–º, —Ç—Ä–∏–∞–ª –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –±–∞–ª–∞–Ω—Å –∫–æ–Ω—á–∏–ª—Å—è
            menu_type = "blocked"
        elif trial_expired:
            menu_type = "trial_expired"
        else:
            menu_type = "only_pay"
    else:
        await create_user_access(user_id)
        menu_type = "new"

    await callback.message.delete()
    if menu_type == "new":
        await callback.message.answer(
            "üîí –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø:\n"
            "‚Äî –ü—Ä–æ–±–Ω—ã–π 1 –¥–µ–Ω—å (–æ–¥–∏–Ω —Ä–∞–∑)\n"
            "‚Äî –ò–ª–∏ –∫—É–ø–∏—Ç—å –º–µ—Å—è—Ü –∑–∞ 399‚ÇΩ\n",
            reply_markup=access_menu_keyboard(show_trial=True, can_restore=False)
        )
    elif menu_type == "restore":
        await callback.message.answer(
            "üîí –£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ.",
            reply_markup=access_menu_keyboard(show_trial=False, can_restore=True)
        )
    elif menu_type == "only_pay":
        await callback.message.answer(
            "üîí –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø. –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø.",
            reply_markup=access_menu_keyboard(show_trial=False, can_restore=False)
        )
    elif menu_type == "trial_expired":
        await callback.message.answer(
            "üïí <b>–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞–≤–µ—Ä—à—ë–Ω.</b>\n\n"
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø.",
            reply_markup=access_menu_keyboard(show_trial=False, can_restore=False),
            parse_mode="HTML"
        )
    elif menu_type == "blocked":
        await callback.message.answer(
            "‚õî <b>–í–∞—à –¥–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>\n\n"
            "–ë–∞–ª–∞–Ω—Å –∏—Å—á–µ—Ä–ø–∞–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",
            reply_markup=blocked_menu_keyboard(),
            parse_mode="HTML"
        )


# ---------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö –í –ú–ï–ù–Æ –î–û–°–¢–£–ü–ê ----------

@router.callback_query(F.data == "trial")
async def activate_trial(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logging.info(f"[DEBUG USER_ID] activate_trial: user_id={user_id}")
    now = datetime.utcnow()
    trial_period = timedelta(days=1)
    await set_trial_access(user_id, now + trial_period)
    await callback.message.delete()
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É API-–∫–ª—é—á–∞

@router.callback_query(F.data == "restore_account")
async def restore_account(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    from bot.handlers.api_entry import ask_restore_access
    await ask_restore_access(callback, state)

@router.callback_query(F.data == "buy")
async def buy_access(callback: CallbackQuery):
    await callback.answer(
        "üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤—Ä—É—á–Ω—É—é.",
        show_alert=True
    )

@router.callback_query(F.data == "back_to_greeting")
async def back_to_greeting(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await cmd_start(callback.message, state)
    await callback.answer()
