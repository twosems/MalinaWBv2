from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from bot.handlers import start, reports, profile, admin, api_entry, main_menu
from bot.keyboards.keyboards import main_menu_inline_keyboard, access_menu_keyboard
from storage.users import get_user_access, get_user_profile_info
from datetime import datetime
from aiogram.fsm.context import FSMContext
import logging

router = Router()

def format_user_info(seller_name, balance, days_left, paid_until, registration_date=None):
    MONTHS = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]
    date_str = f"{paid_until.day} {MONTHS[paid_until.month-1]} {paid_until.year}"
    reg_str = f"\nüóìÔ∏è <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> <code>{format_registration_date(registration_date)}</code>" if registration_date else ""
    return (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
        f"üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω:</b> {seller_name or '‚Äî'}\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{balance}‚ÇΩ</code>\n"
        f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> <code>{days_left}</code>\n"
        f"üìÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:</b> <code>{date_str}</code>"
        f"{reg_str}\n"
        f"\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:</b>"
    )

def format_registration_date(dt: datetime):
    if not dt:
        return "‚Äî"
    MONTHS = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]
    return f"{dt.day} {MONTHS[dt.month-1]} {dt.year}"

def reports_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
    ])

async def main_menu(message: Message, user_id: int = None):
    if user_id is None:
        user_id = message.from_user.id if hasattr(message, "from_user") else None
    logging.info(f"[DEBUG USER_ID] main_menu: user_id={user_id}")

    access = await get_user_access(user_id)
    user_profile = await get_user_profile_info(user_id)
    now = datetime.utcnow()

    trial_active = (
            access and getattr(access, "trial_activated", False)
            and getattr(access, "trial_until", None)
            and access.trial_until and access.trial_until > now
    )
    paid_active = (
            access and access.paid_until and access.paid_until > now
    )

    # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not access or (not paid_active and not trial_active):
        trial_expired = (
                access and getattr(access, "trial_activated", False)
                and getattr(access, "trial_until", None)
                and access.trial_until and access.trial_until <= now
        )
        show_trial = not (access and getattr(access, "trial_activated", False))
        can_restore = False  # –ú–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        await message.answer(
            "üîí –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø:\n"
            "‚Äî –ü—Ä–æ–±–Ω—ã–π 1 –¥–µ–Ω—å (–æ–¥–∏–Ω —Ä–∞–∑)\n"
            "‚Äî –ò–ª–∏ –∫—É–ø–∏—Ç—å –º–µ—Å—è—Ü –∑–∞ 399‚ÇΩ\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –±—ã–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª.",
            reply_markup=access_menu_keyboard(
                trial_active,
                trial_expired,
                show_trial=show_trial,
                can_restore=can_restore
            )
        )
        logging.info(f"[DEBUG USER_ID] –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏! user_id={user_id}")
        return

    if paid_active:
        days_left = max((access.paid_until - now).days, 0)
        access_until = access.paid_until
    else:
        days_left = max((access.trial_until - now).days, 0)
        access_until = access.trial_until

    balance = days_left * 13
    seller_name = user_profile.seller_name if user_profile else "‚Äî"
    registration_date = getattr(user_profile, "created_at", None)

    text = format_user_info(seller_name, balance, days_left, access_until, registration_date)
    await message.answer(text, parse_mode="HTML", reply_markup=main_menu_inline_keyboard())

# ================== –ö–û–õ–ë–≠–ö–ò –î–õ–Ø –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–û–ö ==================

@router.callback_query(F.data == "main_profile")
async def main_profile(callback: CallbackQuery, state: FSMContext):
    from bot.handlers.profile import profile_menu
    user_id = callback.from_user.id
    logging.info(f"[DEBUG USER_ID] main_profile callback: user_id={user_id}")
    await callback.message.delete()
    await profile_menu(callback.message, state)

@router.callback_query(F.data == "main_reports")
async def reports_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìä <b>–†–∞–∑–¥–µ–ª –æ—Ç—á—ë—Ç–æ–≤</b>\n\n–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –æ—Ç—á—ë—Ç—ã.",
        reply_markup=reports_menu_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    logging.info(f"[DEBUG USER_ID] back_to_main_menu: user_id={user_id}")
    await callback.message.delete()
    await main_menu(callback.message, user_id=user_id)

@router.callback_query(F.data == "main_analytics")
async def analytics_menu(callback: CallbackQuery):
    await callback.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.", show_alert=True)

@router.callback_query(F.data == "main_slots")
async def slots_menu(callback: CallbackQuery):
    await callback.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª —Å–ª–æ—Ç–æ–≤.", show_alert=True)

@router.callback_query(F.data == "main_support")
async def support_menu(callback: CallbackQuery):
    await callback.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞.", show_alert=True)

@router.callback_query(F.data == "main_instructions")
async def instructions_menu(callback: CallbackQuery):
    await callback.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.", show_alert=True)
