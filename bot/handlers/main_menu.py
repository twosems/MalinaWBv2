from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from bot.keyboards.keyboards import main_menu_inline_keyboard
from storage.users import get_user_access, get_user_profile_info
from datetime import datetime
import logging

router = Router()

def format_user_info(seller_name, trade_mark, balance, days_left, paid_until):
    MONTHS = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]
    date_str = f"{paid_until.day} {MONTHS[paid_until.month-1]} {paid_until.year}"
    return (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
        f"üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω:</b> {seller_name or '‚Äî'}\n"
        f"üè∑Ô∏è <b>–ë—Ä–µ–Ω–¥:</b> {trade_mark or '‚Äî'}\n"
        f"\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{balance}‚ÇΩ</code>\n"
        f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> <code>{days_left}</code>\n"
        f"üìÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:</b> <code>{date_str}</code>\n"
        f"\n"
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:</b>"
    )

async def main_menu(message: Message):
    user_id = message.from_user.id
    access = await get_user_access(user_id)
    user_profile = await get_user_profile_info(user_id)
    now = datetime.utcnow()

    # --- –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ access
    if access is None:
        debug_text = "<b>DEBUG main_menu:</b>\naccess: <code>None</code>"
        logging.info(f"[DEBUG main_menu] user_id={user_id} access=None")
        await message.answer(debug_text, parse_mode="HTML")
        from aiogram.types import ReplyKeyboardRemove
        await message.answer("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", reply_markup=ReplyKeyboardRemove())
        return

    debug_text = (
        "<b>DEBUG main_menu:</b>\n"
        f"paid_until: <code>{access.paid_until} [{type(access.paid_until)}]</code>\n"
        f"trial_until: <code>{access.trial_until} [{type(access.trial_until)}]</code>\n"
        f"now: <code>{now} [{type(now)}]</code>"
    )
    logging.info(f"[DEBUG main_menu] user_id={user_id} paid_until={access.paid_until} ({type(access.paid_until)}) "
                 f"trial_until={access.trial_until} ({type(access.trial_until)}) now={now} ({type(now)})")
    if message.chat.type == "private":
        await message.answer(debug_text, parse_mode="HTML")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π trial
    trial_active = (
            getattr(access, "trial_activated", False)
            and getattr(access, "trial_until", None)
            and access.trial_until and access.trial_until > now
    )
    paid_active = (
            access.paid_until and access.paid_until > now
    )

    if not paid_active and not trial_active:
        from aiogram.types import ReplyKeyboardRemove
        await message.answer("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", reply_markup=ReplyKeyboardRemove())
        return

    # –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ (trial –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞)
    if paid_active:
        days_left = max((access.paid_until - now).days, 0)
        access_until = access.paid_until
    else:
        days_left = max((access.trial_until - now).days, 0)
        access_until = access.trial_until

    balance = days_left * 13
    seller_name = user_profile.seller_name if user_profile else "‚Äî"
    trade_mark = user_profile.trade_mark if user_profile else "‚Äî"

    text = format_user_info(seller_name, trade_mark, balance, days_left, access_until)
    await message.answer(text, parse_mode="HTML", reply_markup=main_menu_inline_keyboard())

# –û—Å—Ç–∞–ª—å–Ω—ã–µ callback_handlers –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:

@router.callback_query(F.data == "main_profile")
async def main_profile(callback: CallbackQuery):
    from bot.handlers.profile import profile_menu
    await callback.message.delete()
    await profile_menu(callback.message)

@router.callback_query(F.data == "main_reports")
async def reports_menu(callback: CallbackQuery):
    await callback.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª –æ—Ç—á—ë—Ç–æ–≤.", show_alert=True)

@router.callback_query(F.data == "main_analytics")
async def analytics_menu(callback: CallbackQuery):
    await callback.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.", show_alert=True)

@router.callback_query(F.data == "main_slots")
async def slots_menu(callback: CallbackQuery):
    await callback.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª —Å–ª–æ—Ç–æ–≤.", show_alert=True)

@router.callback_query(F.data == "main_support")
async def support_menu(callback: CallbackQuery):
    await callback.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞.", show_alert=True)

@router.callback_query(F.data == "main_instructions")
async def instructions_menu(callback: CallbackQuery):
    await callback.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.", show_alert=True)
