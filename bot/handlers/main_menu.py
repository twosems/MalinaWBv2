"""
handlers/main_menu.py

–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ (–±–∞–ª–∞–Ω—Å –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–∏–∞–ª) ‚Äî –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ /start.
- –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: –º–∞–≥–∞–∑–∏–Ω, –±–∞–ª–∞–Ω—Å, –æ—Å—Ç–∞—Ç–æ–∫ –¥–Ω–µ–π, –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º (–ø—Ä–æ—Ñ–∏–ª—å, –æ—Ç—á—ë—Ç—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –¥—Ä.) —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
    - get_user_access, has_active_access ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    - get_user_profile_info ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    - main_menu_inline_keyboard ‚Äî –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    - access_menu_keyboard ‚Äî –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã/–ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from bot.keyboards.keyboards import main_menu_inline_keyboard
from storage.users import get_user_access, get_user_profile_info, has_active_access
from datetime import datetime
from aiogram.fsm.context import FSMContext
import logging

router = Router()

def format_registration_date(dt: datetime):
    if not dt:
        return "‚Äî"
    MONTHS = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]
    return f"{dt.day} {MONTHS[dt.month-1]} {dt.year}"

async def main_menu(message: Message, user_id: int = None):
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    - –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚Äî –±–ª–æ–∫ —Å –±–∞–ª–∞–Ω—Å–∞ –∏ –¥–Ω—è–º–∏ –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ –ø—Ä–æ—á–µ—Ä–∫–∏, –∞ –∏–Ω—Ñ–æ –æ —Ç—Ä–∏–∞–ª–µ –≤—ã–Ω–µ—Å–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∞–±–∑–∞—Ü–µ–º –Ω–∏–∂–µ.
    - –ï—Å–ª–∏ —Ç—Ä–∏–∞–ª –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –æ–±—ã—á–Ω—ã–π –≤—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞ –∏ –¥–Ω–µ–π, –±–µ–∑ –∏–Ω—Ñ–æ –æ —Ç—Ä–∏–∞–ª–µ.
    """
    if user_id is None:
        user_id = message.from_user.id if hasattr(message, "from_user") else None
    logging.info(f"[DEBUG USER_ID] main_menu: user_id={user_id}")

    access = await get_user_access(user_id)
    if not access or not has_active_access(access):
        await message.answer(
            "‚õîÔ∏è –í–∞—à –¥–æ—Å—Ç—É–ø –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.",
        )
        return

    user_profile = await get_user_profile_info(user_id)
    DAILY_COST = 399 // 30

    trial_activated = getattr(access, "trial_activated", False)
    trial_until = getattr(access, "trial_until", None)
    now = datetime.utcnow()
    in_trial = trial_activated and trial_until and now <= trial_until

    seller_name = user_profile.seller_name if user_profile else "‚Äî"
    registration_date = getattr(access, "created_at", None)

    if in_trial:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—á–µ—Ä–∫–∏ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ –æ –ø—Ä–æ–±–Ω–∏–∫–µ
        balance_block = (
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>‚Äî</code>\n"
            f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> <code>‚Äî</code>\n"
        )
        trial_info = (
            f"\nüÜì <b>–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω</b>\n"
            f"‚è≥ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> <code>{trial_until.strftime('%d.%m.%Y %H:%M')}</code>\n"
        )
    else:
        balance = getattr(access, "balance", 0)
        days_left = balance // DAILY_COST if balance > 0 else 0
        balance_block = (
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{balance}‚ÇΩ</code>\n"
            f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> <code>{days_left}</code>\n"
        )
        trial_info = ""

    text = (
        f"üë§ <b>–û—Å–Ω–æ–≤–Ω–æ–µ –ú–µ–Ω—é</b>\n"
        f"üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω:</b> {seller_name}\n"
        f"{balance_block}"
        f"{trial_info}"
        f"{f'üóìÔ∏è <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> <code>{format_registration_date(registration_date)}</code>' if registration_date else ''}\n"
        f"\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:</b>"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=main_menu_inline_keyboard())

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (—Ä–∞–∑–¥–µ–ª—ã –º–µ–Ω—é) ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –æ—Å—Ç–∞–≤–ª—è–π
@router.callback_query(F.data == "main_profile")
async def main_profile(callback: CallbackQuery, state: FSMContext):
    from bot.handlers.profile import profile_menu
    user_id = callback.from_user.id
    await callback.message.delete()
    await profile_menu(callback.message, state, user_id=user_id)

@router.callback_query(F.data == "main_reports")
async def reports_menu(callback: CallbackQuery):
    # –¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ reports_keyboard, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—Ä–∞–∑—É –≤—ã–≤–æ–¥–∏—Ç—å –º–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤
    await callback.message.edit_text(
        "üìä <b>–†–∞–∑–¥–µ–ª –æ—Ç—á—ë—Ç–æ–≤</b>\n\n–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –æ—Ç—á—ë—Ç—ã.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]]
        ),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.message.delete()
    await main_menu(callback.message, user_id=user_id)

@router.callback_query(F.data == "main_analytics")
async def analytics_menu(callback: CallbackQuery):
    await callback.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.", show_alert=True)

@router.callback_query(F.data == "main_slots")
async def slots_menu(callback: CallbackQuery):
    await callback.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª —Å–ª–æ—Ç–æ–≤.", show_alert=True)

@router.callback_query(F.data == "main_support")
async def support_menu(callback: CallbackQuery):
    await callback.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞.", show_alert=True)

@router.callback_query(F.data == "main_instructions")
async def instructions_menu(callback: CallbackQuery):
    await callback.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.", show_alert=True)
