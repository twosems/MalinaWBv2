from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from storage.users import get_user_price_type, set_user_price_type
from bot.keyboards.keyboards import sales_report_settings_keyboard, sales_price_type_keyboard
from storage.users import get_user_article_mode, set_user_article_mode
from bot.keyboards.keyboards import articles_mode_keyboard, article_mode_human
from aiogram.exceptions import TelegramBadRequest
from storage.users import get_user_warehouse_filter, set_user_warehouse_filter
from bot.keyboards.keyboards import warehouse_filter_keyboard
router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(F.data == "sales_report_settings")
async def sales_report_settings_menu(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    price_type = await get_user_price_type(user_id)
    article_mode = await get_user_article_mode(user_id)
    warehouse_filter = await get_user_warehouse_filter(user_id)
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á—ë—Ç–æ–≤</b>\n"
        "\n"
        "üí∞ <b>–í–∏–¥ —Ü–µ–Ω -</b> —É–ø—Ä–∞–≤–ª—è–π—Ç–µ, –∫–∞–∫–∏–µ —Ü–µ–Ω—ã –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ –æ—Ç—á—ë—Ç–∞—Ö.\n"
        "üõí <b>–ê—Ä—Ç–∏–∫—É–ª—ã –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> –≤—Å–µ, –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Å –æ—Å—Ç–∞—Ç–∫–æ–º –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö.\n"
        "üè¨ <b>–°–∫–ª–∞–¥—ã:-</b> –≤—Å–µ —Å–∫–ª–∞–¥—ã, –∏–ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å –°–¶.\n"
        "\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∏–∂–µ üëá"
    )

    await callback.message.edit_text(
        text,
        reply_markup=sales_report_settings_keyboard(price_type, article_mode, warehouse_filter),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "sales_price_type")
@router.callback_query(F.data.startswith("set_price_type:"))
async def open_sales_price_type(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if callback.data.startswith("set_price_type:"):
        price_type = callback.data.split(":", 1)[1]
        await set_user_price_type(user_id, price_type)
    else:
        price_type = await get_user_price_type(user_id)
    try:
        await callback.message.edit_text(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ü–µ–Ω—ã –¥–ª—è –æ—Ç—á—ë—Ç–∞:</b>",
            reply_markup=sales_price_type_keyboard(price_type),
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–£–∂–µ –≤—ã–±—Ä–∞–Ω —ç—Ç–æ—Ç —Ç–∏–ø —Ü–µ–Ω—ã.", show_alert=False)
        else:
            raise

@router.callback_query(F.data == "articles_mode")
@router.callback_query(F.data.startswith("set_article_mode:"))
async def open_articles_mode(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if callback.data.startswith("set_article_mode:"):
        mode = callback.data.split(":", 1)[1]
        await set_user_article_mode(user_id, mode)
    else:
        mode = await get_user_article_mode(user_id)
    try:
        await callback.message.edit_text(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤—ã–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤:</b>",
            reply_markup=articles_mode_keyboard(mode),
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–£–∂–µ –≤—ã–±—Ä–∞–Ω —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç.", show_alert=False)
        else:
            raise

@router.callback_query(F.data == "warehouses_filter_mode")
@router.callback_query(F.data.startswith("set_warehouse_filter:"))
async def open_warehouse_filter_mode(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if callback.data.startswith("set_warehouse_filter:"):
        value = callback.data.split(":", 1)[1]
        await set_user_warehouse_filter(user_id, value)
    else:
        value = await get_user_warehouse_filter(user_id)
    try:
        await callback.message.edit_text(
            "<b>–§–∏–ª—å—Ç—Ä —Å–∫–ª–∞–¥–æ–≤:</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ –≤—Å–µ—Ö –æ—Ç—á—ë—Ç–∞—Ö:",
            reply_markup=warehouse_filter_keyboard(value),
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–£–∂–µ –≤—ã–±—Ä–∞–Ω —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç.", show_alert=False)
        else:
            raise

