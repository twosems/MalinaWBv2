from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from bot.keyboards.keyboards import profile_keyboard
from storage.users import (
    get_user_access,
    set_user_api_key,
    get_user_api_key,
    remove_user_api_key,
    remove_user_account,
    get_user_profile_info,
    set_user_profile_info
)
import aiohttp

router = Router()

class ProfileStates(StatesGroup):
    waiting_for_api_key = State()

async def profile_menu(message: Message):
    user_id = message.from_user.id
    access = await get_user_access(user_id)
    api_key = await get_user_api_key(user_id)
    user_profile = await get_user_profile_info(user_id)
    seller_name = user_profile.seller_name if user_profile else "‚Äî"
    trade_mark = user_profile.trade_mark if user_profile else "‚Äî"
    await message.answer(
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)</b>\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: <b>{seller_name}</b>\n–ë—Ä–µ–Ω–¥: <b>{trade_mark}</b>\n",
        parse_mode="HTML",
        reply_markup=profile_keyboard()
    )

@router.message(F.text == "–í–≤–µ—Å—Ç–∏ API")
async def ask_for_api_key(message: Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π Wildberries API-–∫–ª—é—á –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=profile_keyboard()
    )
    await state.set_state(ProfileStates.waiting_for_api_key)

@router.message(ProfileStates.waiting_for_api_key)
async def save_api_key(message: Message, state: FSMContext):
    user_id = message.from_user.id
    api_key = message.text.strip()
    url = 'https://common-api.wildberries.ru/api/v1/seller-info'
    headers = {'Authorization': api_key}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            if resp.status == 200:
                data = await resp.json()
                seller_name = data.get('name', '‚Äî')
                trade_mark = data.get('tradeMark', '‚Äî')
                await set_user_api_key(user_id, api_key)
                await set_user_profile_info(user_id, seller_name, trade_mark)
                await message.answer("‚úÖ API-–∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω.", reply_markup=profile_keyboard())
                await state.clear()
                await profile_menu(message)
                return
            else:
                await message.answer("‚ùå –ö–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.", reply_markup=profile_keyboard())

@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å API")
async def del_api(message: Message):
    user_id = message.from_user.id
    await remove_user_api_key(user_id)
    await set_user_profile_info(user_id, None, None)
    await message.answer("API-–∫–ª—é—á —É–¥–∞–ª—ë–Ω.", reply_markup=profile_keyboard())
    await profile_menu(message)

@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def del_account(message: Message):
    user_id = message.from_user.id
    await remove_user_account(user_id)
    await message.answer("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def profile_back(message: Message):
    from bot.handlers.main_menu import main_menu
    await main_menu(message)
