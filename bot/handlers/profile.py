from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from storage.users import (
    get_user_access,
    get_user_api_key,
    set_user_api_key,
    remove_user_api_key,
    get_user_profile_info,
    set_user_profile_info,
    remove_user_account
)
import aiohttp
from datetime import datetime

router = Router()

class ProfileStates(StatesGroup):
    waiting_for_new_api_key = State()
    waiting_for_api_key_confirm = State()
    waiting_for_account_delete_confirm = State()

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
MONTHS = [
    "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
    "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
]
def format_date(dt: datetime):
    return f"{dt.day} {MONTHS[dt.month-1]} {dt.year}"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def profile_inline_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ó–∞–º–µ–Ω–∏—Ç—å API-–∫–ª—é—á", callback_data="replace_api")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
    ])

def api_change_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ö", callback_data="confirm_api_change")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_api_change")]
    ])

def confirm_delete_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_account_delete")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_account_delete")]
    ])

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
async def profile_menu(message: Message, state: FSMContext = None):
    user_id = message.from_user.id
    profile = await get_user_profile_info(user_id)
    access = await get_user_access(user_id)
    now = datetime.utcnow()
    paid_until = getattr(access, "paid_until", None)
    trial_until = getattr(access, "trial_until", None)
    registration_date = getattr(profile, "registration_date", None)
    days_left = 0

    # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
    if paid_until and paid_until > now:
        days_left = (paid_until - now).days
        access_until = paid_until
    elif trial_until and trial_until > now:
        days_left = (trial_until - now).days
        access_until = trial_until
    else:
        access_until = paid_until or trial_until or now

    balance = days_left * 13

    reg_str = format_date(registration_date) if registration_date else "‚Äî"

    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
        f"üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω:</b> {getattr(profile, 'seller_name', '‚Äî')}\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{balance}‚ÇΩ</code>\n"
        f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> <code>{days_left}</code>\n"
        f"üìÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:</b> <code>{format_date(access_until)}</code>\n"
        f"üìÜ <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> <code>{reg_str}</code>\n"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=profile_inline_keyboard())
    if state:
        await state.clear()

# --- –ö–Ω–æ–ø–∫–∞ "–ó–∞–º–µ–Ω–∏—Ç—å API-–∫–ª—é—á" ---
@router.callback_query(F.data == "replace_api")
async def replace_api(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API-–∫–ª—é—á –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
        "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã.",
        reply_markup=None
    )
    await state.set_state(ProfileStates.waiting_for_new_api_key)

# --- –í–≤–æ–¥–∏–º –Ω–æ–≤—ã–π API-–∫–ª—é—á ---
@router.message(ProfileStates.waiting_for_new_api_key)
async def input_new_api_key(message: Message, state: FSMContext):
    new_api_key = message.text.strip()
    url = 'https://common-api.wildberries.ru/api/v1/seller-info'
    headers = {'Authorization': new_api_key}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            if resp.status != 200:
                await message.answer("‚ùå –ö–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª—é—á.")
                return
            data = await resp.json()
            seller_name = data.get('name', '‚Äî')
            user_id = message.from_user.id
            profile = await get_user_profile_info(user_id)
            if seller_name != getattr(profile, "seller_name", None):
                await message.answer("‚ùå –ö–ª—é—á –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É –º–∞–≥–∞–∑–∏–Ω—É. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.")
                return
            await state.update_data(new_api_key=new_api_key)
            await message.answer(
                f"‚úÖ –ù–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ <b>{seller_name}</b>.\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–º–µ–Ω—É?",
                parse_mode="HTML",
                reply_markup=api_change_keyboard()
            )
            await state.set_state(ProfileStates.waiting_for_api_key_confirm)

# --- –ö–Ω–æ–ø–∫–∞ "–û–ö" (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã –∫–ª—é—á–∞) ---
@router.callback_query(ProfileStates.waiting_for_api_key_confirm, F.data == "confirm_api_change")
async def confirm_api_change(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    new_api_key = data.get("new_api_key")
    user_id = callback.from_user.id
    await set_user_api_key(user_id, new_api_key)
    await callback.message.edit_text(
        "‚úÖ –ù–æ–≤—ã–π API-–∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.",
        reply_markup=None
    )
    await state.clear()
    await profile_menu(callback.message, state)

# --- –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞" (–æ—Ç–º–µ–Ω–∞ —Å–º–µ–Ω—ã –∫–ª—é—á–∞) ---
@router.callback_query(ProfileStates.waiting_for_api_key_confirm, F.data == "cancel_api_change")
async def cancel_api_change(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ó–∞–º–µ–Ω–∞ API-–∫–ª—é—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    await state.clear()
    await profile_menu(callback.message, state)

# --- –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç" ---
@router.callback_query(F.data == "delete_account")
async def delete_account_confirm(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?\n\n"
        "–ë–∞–ª–∞–Ω—Å –∏ –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        reply_markup=confirm_delete_keyboard()
    )
    await state.set_state(ProfileStates.waiting_for_account_delete_confirm)

# --- –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ---
@router.callback_query(ProfileStates.waiting_for_account_delete_confirm, F.data == "confirm_account_delete")
async def confirm_account_delete(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await remove_user_api_key(user_id)
    await remove_user_account(user_id)
    await callback.message.edit_text(
        "–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω.\n\n–î–∞–Ω–Ω—ã–µ –æ–± –æ–ø–ª–∞—Ç–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n–î–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
        reply_markup=None
    )
    await state.clear()
    from bot.handlers.start import cmd_start
    await cmd_start(callback.message)

# --- –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ ---
@router.callback_query(ProfileStates.waiting_for_account_delete_confirm, F.data == "cancel_account_delete")
async def cancel_account_delete(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    await state.clear()
    await profile_menu(callback.message, state)

# --- –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" ---
@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    from bot.handlers.main_menu import main_menu
    await callback.message.delete()
    await main_menu(callback.message, user_id=callback.from_user.id)
    if state:
        await state.clear()
