"""
profile.py ‚Äî —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram-–±–æ—Ç–∞.

–§—É–Ω–∫—Ü–∏–∏:
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ (–æ–ø–ª–∞—á–µ–Ω, –ø—Ä–æ–±–Ω—ã–π, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –æ–ø–ª–∞—Ç–µ
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ Wildberries API-–∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∫–Ω–æ–ø–∫—É)
- –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ storage.users –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î:
    - get_user_access
    - set_trial_access
    - create_user_access
    - set_user_api_key
    - get_user_api_key

–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:
- –ö–Ω–æ–ø–∫–∞ "üë§ –ü—Ä–æ—Ñ–∏–ª—å" –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π API-–∫–ª—é—á
- –°–æ–æ–±—â–µ–Ω–∏–µ "API <–∫–ª—é—á>" —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç API-–∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ö–Ω–æ–ø–∫–∞ "–ú–æ–π API –∫–ª—é—á" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π API-–∫–ª—é—á
"""

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime, timedelta
from storage.users import (
    get_user_access,
    set_trial_access,
    create_user_access,
    set_user_api_key,
    get_user_api_key
)

router = Router()

def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –û—Ç—á—ë—Ç—ã")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
        ],
        resize_keyboard=True
    )

def profile_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–æ–π API –∫–ª—é—á")],
            [KeyboardButton(text="–í–≤–µ—Å—Ç–∏ API –∫–ª—é—á")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )

def access_keyboard(trial_active, trial_expired):
    kb = []
    if not trial_active and not trial_expired:
        kb.append([InlineKeyboardButton(text="üïí –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø (1 —á–∞—Å)", callback_data="trial")])
    else:
        label = "üïí –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø (—É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω)" if trial_expired else "üïí –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø (–∞–∫—Ç–∏–≤–µ–Ω)"
        kb.append([InlineKeyboardButton(text=label, callback_data="trial_disabled")])
    kb.append([InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø 399‚ÇΩ/–º–µ—Å", callback_data="buy")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

@router.message(F.text == "/start")
async def cmd_start(message: Message):
    user_id = message.from_user.id
    now = datetime.now()

    # –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞—ë–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    access = await get_user_access(user_id)
    if not access:
        await create_user_access(user_id)
        access = await get_user_access(user_id)

    paid_until = access.paid_until
    trial_until = access.trial_until
    trial_activated = access.trial_activated

    if paid_until and paid_until > now:
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–æ—Å—Ç—É–ø –æ–ø–ª–∞—á–µ–Ω –¥–æ {paid_until.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=main_menu_keyboard()
        )
        return

    if trial_activated and trial_until and trial_until > now:
        await message.answer(
            f"üëã –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {trial_until.strftime('%H:%M')}.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            reply_markup=main_menu_keyboard()
        )
        return

    if trial_activated and trial_until and trial_until <= now:
        await message.answer(
            "–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.\n–ö—É–ø–∏—Ç–µ –¥–æ—Å—Ç—É–ø, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
            reply_markup=access_keyboard(trial_active=False, trial_expired=True)
        )
        return

    await message.answer(
        "üîí –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø:\n‚Äî –ü—Ä–æ–±–Ω—ã–π 1 —á–∞—Å (–æ–¥–∏–Ω —Ä–∞–∑)\n‚Äî –ò–ª–∏ –∫—É–ø–∏—Ç—å –º–µ—Å—è—Ü –∑–∞ 399‚ÇΩ",
        reply_markup=access_keyboard(trial_active=False, trial_expired=False)
    )

@router.callback_query(F.data == "trial")
async def activate_trial(callback):
    user_id = callback.from_user.id
    now = datetime.now()
    await set_trial_access(user_id, now + timedelta(hours=1))

    await callback.message.edit_text(
        "üïí –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 1 —á–∞—Å!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n"
        "–ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚Äî –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
    )
    await callback.message.answer(
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "buy")
async def buy_access(callback):
    await callback.message.edit_text(
        "üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n"
        "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤—Ä—É—á–Ω—É—é.",
        reply_markup=access_keyboard(trial_active=True, trial_expired=True)
    )
    await callback.answer()

@router.callback_query(F.data == "trial_disabled")
async def trial_disabled(callback):
    await callback.answer("–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", show_alert=True)

# === –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É API-–∫–ª—é—á–∞ ===

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Å—Ç–∏ API –∫–ª—é—á"
@router.message(F.text == "–í–≤–µ—Å—Ç–∏ API –∫–ª—é—á")
async def ask_for_api_key(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π Wildberries API-–∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\nAPI <–≤–∞—à_–∫–ª—é—á>")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API-–∫–ª—é—á–∞ (–æ–∂–∏–¥–∞–µ—Ç "API <–∫–ª—é—á>")
@router.message(F.text.regexp(r"^API\s+(.+)"))
async def save_api_key(message: Message):
    user_id = message.from_user.id
    api_key = message.text.split(' ', 1)[1].strip()
    await set_user_api_key(user_id, api_key)
    await message.answer("‚úÖ –í–∞—à API-–∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=profile_menu_keyboard())

# –ö–Ω–æ–ø–∫–∞ "–ú–æ–π API –∫–ª—é—á" ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π API-–∫–ª—é—á
@router.message(F.text == "–ú–æ–π API –∫–ª—é—á")
async def show_api_key(message: Message):
    user_id = message.from_user.id
    api_key = await get_user_api_key(user_id)
    if api_key:
        await message.answer(f"–í–∞—à —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π API-–∫–ª—é—á:\n<code>{api_key}</code>", reply_markup=profile_menu_keyboard())
    else:
        await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω API-–∫–ª—é—á.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–í–≤–µ—Å—Ç–∏ API –∫–ª—é—á'.", reply_markup=profile_menu_keyboard())

# –ü—Ä–æ—Ñ–∏–ª—å (–∫–Ω–æ–ø–∫–∞)
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_menu(message: Message):
    await message.answer(
        "–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:\n\n"
        "- –ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π Wildberries API-–∫–ª—é—á\n"
        "- –î–ª—è —Å–º–µ–Ω—ã –∫–ª—é—á–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π (API <–∫–ª—é—á>)",
        reply_markup=profile_menu_keyboard()
    )
