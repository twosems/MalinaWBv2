from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime
import aiohttp

from storage.users import (
    get_user_access,
    set_user_api_key,
    get_user_api_key,
    remove_user_api_key,
    remove_user_account,
    get_user_profile_info,
    set_user_profile_info
)
from bot.keyboards.main_menu import main_menu_keyboard

router = Router()

class ProfileStates(StatesGroup):
    waiting_for_api_key = State()

def profile_new_user_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–í–≤–µ—Å—Ç–∏ API")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )

def profile_full_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å API")],
            [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )

def profile_api_fail_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
        ],
        resize_keyboard=True
    )

async def user_has_access(user_id: int):
    access = await get_user_access(user_id)
    if not access:
        return False
    now = datetime.now()
    if access.paid_until and access.paid_until > now:
        return True
    if access.trial_activated and access.trial_until and access.trial_until > now:
        return True
    return False

def format_date(date: datetime):
    MONTHS = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]
    return f"{date.day} {MONTHS[date.month-1]} {date.year}"

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_menu(message: Message, use_main_menu=False, prompt_api_if_none=False):
    user_id = message.from_user.id
    if not await user_has_access(user_id):
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!\n\n–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–Ω—ã–π –∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ /start.")
        return

    access = await get_user_access(user_id)
    api_key = await get_user_api_key(user_id)
    user_profile = await get_user_profile_info(user_id)
    now = datetime.now()

    if not api_key or prompt_api_if_none:
        await message.answer(
            "üîë <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º MalinaWB –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á API.</b>",
            reply_markup=profile_new_user_keyboard(),
            parse_mode="HTML"
        )
        return

    if access.paid_until and access.paid_until > now:
        days_left = (access.paid_until - now).days
        balance = int(days_left * 399 / 30)
        access_type = f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance} —Ä—É–±.</b>\n‚è≥ –î–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞: <b>{days_left}</b>"
        sub_msg = f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: <b>{format_date(access.paid_until)}</b>"
    elif access.trial_activated and access.trial_until and access.trial_until > now:
        minutes_left = int((access.trial_until - now).total_seconds() // 60)
        access_type = f"üïí –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø\n‚è≥ –ú–∏–Ω—É—Ç –æ—Å—Ç–∞–ª–æ—Å—å: <b>{minutes_left}</b>"
        sub_msg = f"–ü—Ä–æ–±–Ω—ã–π –¥–æ: <b>{format_date(access.trial_until)}</b>"
    else:
        access_type = "üí∞ –ë–∞–ª–∞–Ω—Å: <b>0 —Ä—É–±.</b>\n‚è≥ –î–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞: <b>0</b>"
        sub_msg = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"

    seller_name = user_profile.seller_name if user_profile else "‚Äî"
    trade_mark = user_profile.trade_mark if user_profile else "‚Äî"

    if use_main_menu:
        reply_kb = main_menu_keyboard()
    else:
        reply_kb = profile_full_keyboard() if api_key else profile_new_user_keyboard()

    await message.answer(
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"{access_type}\n\n"
        f"üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω: <b>{seller_name}</b>\n"
        f"üè∑Ô∏è –ë—Ä–µ–Ω–¥: <b>{trade_mark}</b>\n\n"
        f"{sub_msg}",
        parse_mode="HTML",
        reply_markup=reply_kb
    )

@router.message(F.text == "–í–≤–µ—Å—Ç–∏ API")
async def ask_for_api_key(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not await user_has_access(user_id):
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!\n\n–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–Ω—ã–π –∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ /start.")
        return
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π Wildberries API-–∫–ª—é—á –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=profile_api_fail_keyboard()
    )
    await state.set_state(ProfileStates.waiting_for_api_key)

@router.message(ProfileStates.waiting_for_api_key)
async def save_api_key(message: Message, state: FSMContext):
    user_id = message.from_user.id
    api_key = message.text.strip()
    url = 'https://common-api.wildberries.ru/api/v1/seller-info'
    headers = {'Authorization': api_key}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            if resp.status == 200:
                data = await resp.json()
                seller_name = data.get('name', '‚Äî')
                trade_mark = data.get('tradeMark', '‚Äî')
                await set_user_api_key(user_id, api_key)
                await set_user_profile_info(user_id, seller_name, trade_mark)
                await message.answer(
                    "‚úÖ API-–∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω.\n\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω.",
                    reply_markup=main_menu_keyboard()
                )
                await state.clear()
                await profile_menu(message, use_main_menu=True)
                return
            else:
                await message.answer(
                    "‚ùå –ö–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∫–ª—é—á –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.",
                    reply_markup=profile_api_fail_keyboard()
                )

@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def api_cancel(message: Message, state: FSMContext):
    await state.clear()
    await profile_menu(message, prompt_api_if_none=True)

@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å API")
async def del_api(message: Message):
    user_id = message.from_user.id
    await remove_user_api_key(user_id)
    await set_user_profile_info(user_id, None, None)
    await message.answer("API-–∫–ª—é—á —É–¥–∞–ª—ë–Ω.", reply_markup=profile_new_user_keyboard())
    await profile_menu(message, prompt_api_if_none=True)

@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def del_account(message: Message):
    user_id = message.from_user.id
    await remove_user_account(user_id)
    await message.answer("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def profile_back(message: Message):
    from bot.handlers.start import cmd_start
    await cmd_start(message)
