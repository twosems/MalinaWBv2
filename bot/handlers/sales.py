from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from datetime import datetime, timedelta
from bot.services.wildberries_api import get_sales_report
from storage.users import get_user_api_key

router = Router()

# –ú–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
def sales_main_keyboard():
    kb = [
        [InlineKeyboardButton("üõí –í—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data="sales_all_menu")],
        [InlineKeyboardButton("üîç –ü–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º", callback_data="sales_articles_menu")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="reports_menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
def sales_period_keyboard():
    kb = [
        [InlineKeyboardButton("‚ö° –ó–∞ 30 –¥–Ω–µ–π (–±—ã—Å—Ç—Ä–æ)", callback_data="sales_all_month_fast")],
        [InlineKeyboardButton("üìÜ –ó–∞ –¥–µ–Ω—å", callback_data="sales_all_day")],
        [InlineKeyboardButton("üóì –ó–∞ –ø–µ—Ä–∏–æ–¥", callback_data="sales_all_period")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="sales_menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# 1. –í—Ö–æ–¥ —á–µ—Ä–µ–∑ –º–µ–Ω—é ‚Äú–û—Ç—á—ë—Ç—ã‚Äù
@router.callback_query(F.data == "sales_menu")
async def sales_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "<b>–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=sales_main_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# 2. ‚Äú–í—Å–µ —Ç–æ–≤–∞—Ä—ã‚Äù ‚Äî –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
@router.callback_query(F.data == "sales_all_menu")
async def sales_all_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º:",
        reply_markup=sales_period_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# 3. –ë—ã—Å—Ç—Ä—ã–π –æ—Ç—á—ë—Ç –∑–∞ 30 –¥–Ω–µ–π (–≤—Å–µ —Ç–æ–≤–∞—Ä—ã)
@router.callback_query(F.data == "sales_all_month_fast")
async def sales_all_month_fast(callback: CallbackQuery):
    user_id = callback.from_user.id
    api_key = await get_user_api_key(user_id)
    if not api_key:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API-–∫–ª—é—á –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
        return
    date_to = datetime.now().date()
    date_from = date_to - timedelta(days=30)
    await callback.message.answer("–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π...")
    data = await get_sales_report(api_key, date_from.isoformat(), date_to.isoformat())
    if not data or not isinstance(data, list):
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.")
        return
    total = sum(item.get("forPay", 0) for item in data)
    await callback.message.answer(
        f"üõí <b>–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ 30 –¥–Ω–µ–π</b>\n"
        f"–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {len(data)}\n"
        f"–°—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: {total:.2f} ‚ÇΩ",
        parse_mode="HTML"
    )
    # ‚Äî –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª ‚Äî –¥–æ–±–∞–≤—å –∑–¥–µ—Å—å –≤—ã–∑–æ–≤ send_sales_csv(data)

# 4. –ó–∞ –¥–µ–Ω—å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –¥–∞—Ç—É)
@router.callback_query(F.data == "sales_all_day")
async def sales_all_day(callback: CallbackQuery):
    # –ú–æ–∂–µ—à—å –∑–¥–µ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –¥–ª—è –æ—Ç—á—ë—Ç–∞ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º.")
    await callback.answer()

@router.message(F.text.regexp(r"\d{4}-\d{2}-\d{2}"))
async def sales_all_by_day(message: Message):
    user_id = message.from_user.id
    api_key = await get_user_api_key(user_id)
    date_from = date_to = message.text.strip()
    data = await get_sales_report(api_key, date_from, date_to)
    if not data or not isinstance(data, list):
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.")
        return
    total = sum(item.get("forPay", 0) for item in data)
    await message.answer(
        f"üõí <b>–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ {date_from}</b>\n"
        f"–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {len(data)}\n"
        f"–°—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: {total:.2f} ‚ÇΩ",
        parse_mode="HTML"
    )

# 5. –ó–∞ –ø–µ—Ä–∏–æ–¥ (–¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞—Ç–∞–º–∏)
@router.callback_query(F.data == "sales_all_period")
async def sales_all_period(callback: CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
    await callback.answer()
    # ‚Äî FSM —Ç—É—Ç –ø–æ–º–æ–∂–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –¥–≤—É—Ö –¥–∞—Ç –ø–æ–¥—Ä—è–¥

# 6. –ü–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º ‚Äî –º–µ–Ω—é (–∑–∞–≥–æ—Ç–æ–≤–∫–∞, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–ø. —Ñ–∏–ª—å—Ç—Ä)
@router.callback_query(F.data == "sales_articles_menu")
async def sales_articles_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):"
    )
    await callback.answer()

@router.message(F.text.regexp(r"^[\d, ]+$"))  # –ø—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞(–æ–≤)
async def sales_by_articles(message: Message):
    user_id = message.from_user.id
    api_key = await get_user_api_key(user_id)
    articles = [art.strip() for art in message.text.split(",")]
    # –ó–¥–µ—Å—å —Ü–∏–∫–ª –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º ‚Äî –∏–ª–∏ –≤—ã–∑–æ–≤–∏ —Å–≤–æ–π —Å–µ—Ä–≤–∏—Å –ø–æ –∫–∞–∂–¥–æ–º—É
    result_msg = ""
    for art in articles:
        data = await get_sales_report(api_key, None, None, article=art)  # –¥–æ—Ä–∞–±–æ—Ç–∞–π get_sales_report –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        if not data or not isinstance(data, list):
            result_msg += f"\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É {art}"
        else:
            total = sum(item.get("forPay", 0) for item in data)
            result_msg += f"\n–ê—Ä—Ç–∏–∫—É–ª {art}: {len(data)} –ø—Ä–æ–¥–∞–∂, {total:.2f} ‚ÇΩ"
    await message.answer(result_msg or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º.")

# 7. –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤
@router.callback_query(F.data == "reports_menu")
async def back_to_reports(callback: CallbackQuery):
    from bot.keyboards.inline import reports_keyboard
    await callback.message.edit_text(
        "üìä <b>–†–∞–∑–¥–µ–ª –æ—Ç—á—ë—Ç–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
        reply_markup=reports_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()