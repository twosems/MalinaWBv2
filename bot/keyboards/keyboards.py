from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

def guest_menu():
    # "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∫–∞–∫ inline-–∫–Ω–æ–ø–∫–∞!
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="guest_continue")]
        ]
    )

def main_menu_inline_keyboard():
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: 2 —Å—Ç–æ–ª–±—Ü–∞, 3 —Ä—è–¥–∞ (–≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ 2 –∫–Ω–æ–ø–∫–∏)
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –û—Ç—á—ë—Ç—ã", callback_data="main_reports"),
            InlineKeyboardButton(text="üìÖ –°–ª–æ—Ç—ã", callback_data="main_slots")
        ],
        [
            InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="main_analytics"),
            InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="main_info")
        ],
        [
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="main_profile"),
            InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="main_support")
        ]
    ])

def profile_keyboard(has_api=True):
    if has_api:
        kb = [
            [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å API")],
            [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ]
    else:
        kb = [
            [KeyboardButton(text="–í–≤–µ—Å—Ç–∏ API")],
            [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def access_menu_keyboard(show_trial=False, can_restore=False):
    kb = []
    if can_restore:
        kb.append([InlineKeyboardButton(text="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="restore_account")])
    elif show_trial:
        kb.append([InlineKeyboardButton(text="üïí –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø (1 –¥–µ–Ω—å)", callback_data="trial")])
    kb.append([InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø 399‚ÇΩ/–º–µ—Å", callback_data="buy")])
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_greeting")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def profile_api_fail_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )


def blocked_menu_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="pay_balance")],
            [InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="main_support")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_greeting")]
        ]
    )
def info_menu_inline_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üè¨ –°–∫–ª–∞–¥—ã WB", callback_data="info_warehouses"),
                InlineKeyboardButton(text="üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="info_instructions")
            ],
            [
                InlineKeyboardButton(text="üìú –û—Ñ–µ—Ä—Ç–∞", callback_data="info_offer"),
                InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="info_support")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
            ]
        ]
    )

def reports_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üì¶ –û—Å—Ç–∞—Ç–∫–∏", callback_data="report_remains"),
                InlineKeyboardButton(text="üìà –ü—Ä–æ–¥–∞–∂–∏", callback_data="main_sales"),
            ],
            [
                InlineKeyboardButton(text="üè¨ –•—Ä–∞–Ω–µ–Ω–∏–µ", callback_data="report_storage"),
                InlineKeyboardButton(text="üéØ –†–µ–∫–ª–∞–º–∞", callback_data="report_ads"),
            ],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á—ë—Ç–æ–≤", callback_data="sales_report_settings")],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu"),
            ]
        ]
    )
def sales_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –û—Ç—á—ë—Ç –ø–æ —Å–∫–ª–∞–¥—É", callback_data="sales_by_warehouse")],
        [InlineKeyboardButton(text="üóÉ –ü–æ –≤—Å–µ–º —Å–∫–ª–∞–¥–∞–º", callback_data="sales_by_all_warehouses")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_reports")],
    ])

def warehouses_keyboard(warehouses):
    kb = [[InlineKeyboardButton(text=w["name"], callback_data=f"select_warehouse:{w['id']}:{w['name']}")] for w in warehouses]
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="report_sales")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def sales_period_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö° –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data="sales_month_fast")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="sales_by_warehouse")],
    ])

def back_to_reports_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –æ—Ç—á–µ—Ç–∞–º", callback_data="main_reports")]
    ])
def sales_menu_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ü–æ —Ç–æ–≤–∞—Ä–∞–º", callback_data="sales_by_articles")],
            [InlineKeyboardButton(text="üè¨ –ü–æ —Å–∫–ª–∞–¥–∞–º", callback_data="sales_by_warehouses")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_reports")]
        ]
    )

def sales_price_type_keyboard(current_type: str) -> InlineKeyboardMarkup:
    types = [
        ("totalPrice", "–ë–µ–∑ —Å–∫–∏–¥–æ–∫"),
        ("priceWithDisc", "–°–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–¥–∞–≤—Ü–∞"),
        ("finishedPrice", "–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"),
        ("forPay", "–ö –≤—ã–ø–ª–∞—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü—É"),
    ]
    ICON_SELECTED = "‚úÖ"
    ICON_UNSELECTED = "‚ùå"
    # –°—á–∏—Ç–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∫–Ω–æ–ø–∫–∏ (–≤ —Å–∏–º–≤–æ–ª–∞—Ö)
    max_len = max(len(v) for _, v in types)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å "–¥–æ–±–∏–≤–∫–æ–π" –ø—Ä–æ–±–µ–ª–∞–º–∏ —Å–ø—Ä–∞–≤–∞
    def pad(text):
        # +2 ‚Äî –∑–∞–ø–∞—Å –¥–ª—è emoji –∏ –ø—Ä–æ–±–µ–ª–∞ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
        return text + " " * (max_len - len(text) + 2)
    kb = [
        [
            InlineKeyboardButton(
                text=(f"{ICON_SELECTED}  {pad(v)}" if current_type == k else f"{ICON_UNSELECTED}  {pad(v)}"),
                callback_data=f"set_price_type:{k}"
            )
        ] for k, v in types
    ]
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è  –ù–∞–∑–∞–¥", callback_data="sales_report_settings")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


def sales_report_settings_keyboard(current_price_type: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ü–µ–Ω—ã –≤ –æ—Ç—á—ë—Ç–µ",   # ‚Üê –°—Ç–∞—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è!
                callback_data="sales_price_type"
            )
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_reports")
        ]
    ])
def price_type_human(t):
    return {
        "totalPrice": "–ë–µ–∑ —Å–∫–∏–¥–æ–∫",
        "priceWithDisc": "–°–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–¥–∞–≤—Ü–∞",
        "finishedPrice": "–§–∞–∫—Ç–∏—á. –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è",
        "forPay": "–ö –≤—ã–ø–ª–∞—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü—É",
    }.get(t, t)

def article_mode_human(mode):
    return {
        "all": "–í—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã",
        "in_stock": "–¢–æ–ª—å–∫–æ —Å –æ—Å—Ç–∞—Ç–∫–æ–º",
    }.get(mode, mode)

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def article_mode_human(mode):
    return {
        "all": "–í—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã",
        "in_stock": "–¢–æ–ª—å–∫–æ —Å –æ—Å—Ç–∞—Ç–∫–æ–º",
    }.get(mode, mode)

def articles_mode_keyboard(current_mode: str) -> InlineKeyboardMarkup:
    types = [
        ("all", "–í—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã"),
        ("in_stock", "–¢–æ–ª—å–∫–æ —Å –æ—Å—Ç–∞—Ç–∫–æ–º"),
    ]
    ICON_SELECTED = "‚úÖ"
    ICON_UNSELECTED = "‚ùå"
    max_len = max(len(v) for _, v in types)
    def pad(text):
        return text + " " * (max_len - len(text) + 2)
    kb = [
        [
            InlineKeyboardButton(
                text=(f"{ICON_SELECTED}  {pad(v)}" if current_mode == k else f"{ICON_UNSELECTED}  {pad(v)}"),
                callback_data=f"set_article_mode:{k}"
            )
        ] for k, v in types
    ]
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è  –ù–∞–∑–∞–¥", callback_data="sales_report_settings")])
    return InlineKeyboardMarkup(inline_keyboard=kb)
def sales_report_settings_keyboard(current_price_type: str, current_article_mode: str, current_warehouse_filter: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üíµ –¢–∏–ø —Ü–µ–Ω—ã: " + price_type_human(current_price_type),
                callback_data="sales_price_type"
            )
        ],
        [
            InlineKeyboardButton(
                text="üè∑Ô∏è –ê—Ä—Ç–∏–∫—É–ª—ã: " + article_mode_human(current_article_mode),
                callback_data="articles_mode"
            )
        ],
        [
            InlineKeyboardButton(
                text="üè¨ –°–∫–ª–∞–¥—ã: " + warehouse_filter_human(current_warehouse_filter),
                callback_data="warehouses_filter_mode"
            )
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_reports")
        ]
    ])

def warehouse_filter_human(value):
    return {
        "all": "–í—Å–µ —Å–∫–ª–∞–¥—ã",
        "no_sc": "–ë–µ–∑ –°–¶",
    }.get(value, value)

def warehouse_filter_keyboard(current: str) -> InlineKeyboardMarkup:
    types = [
        ("all", "–í—Å–µ —Å–∫–ª–∞–¥—ã"),
        ("no_sc", "–ë–µ–∑ –°–¶"),
    ]
    ICON_SELECTED = "‚úÖ"
    ICON_UNSELECTED = "‚ùå"
    max_len = max(len(v) for _, v in types)
    def pad(text):
        return text + " " * (max_len - len(text) + 2)
    kb = [
        [
            InlineKeyboardButton(
                text=(f"{ICON_SELECTED}  {pad(v)}" if current == k else f"{ICON_UNSELECTED}  {pad(v)}"),
                callback_data=f"set_warehouse_filter:{k}"
            )
        ] for k, v in types
    ]
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è  –ù–∞–∑–∞–¥", callback_data="sales_report_settings")])
    return InlineKeyboardMarkup(inline_keyboard=kb)
