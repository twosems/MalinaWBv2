
import asyncio
from aiogram import Router, F
from aiogram.types import CallbackQuery
from bot.keyboards.keyboards import reports_keyboard  # –∏–ª–∏ —Ç–≤–æ—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
from storage.users import get_user_api_key
from bot.services.wildberries_api import get_stocks
from bot.utils.pagination import build_pagination_keyboard
from bot.utils.csv_export import export_to_csv
from aiogram.types import InputFile

import csv
import io

router = Router()
PER_PAGE = 10

@router.callback_query(F.data.regexp(r"^report_remains(_page_)?(\d+)?$"))
async def report_remains(callback: CallbackQuery):
    user_id = callback.from_user.id

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π —Ç–æ—á–µ–∫
    msg = await callback.message.edit_text("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç", parse_mode="HTML")
    dots_task = asyncio.create_task(animate_dots(msg))

    try:
        # 2. –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        api_key = await get_user_api_key(user_id)
        if not api_key:
            dots_task.cancel()
            await msg.edit_text(
                "‚ùó –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ API-–∫–ª—é—á.",
                parse_mode="HTML"
            )
            return

        # 3. –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Å WB
        try:
            items = await get_stocks(api_key)
        except Exception as e:
            dots_task.cancel()
            await msg.edit_text(
                f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏.\n–û—à–∏–±–∫–∞: {e}",
                parse_mode="HTML"
            )
            return

        if not items:
            dots_task.cancel()
            await msg.edit_text(
                "‚ùó –û—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                parse_mode="HTML"
            )
            return

        # 4. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∫–ª–∞–¥–∞–º
        warehouse_data = {}
        for item in items:
            qty = item.get("quantity", 0)
            if qty == 0:
                continue
            wh = item.get("warehouseName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            art = item.get("supplierArticle", "–ë–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞")
            name = item.get("subject", "–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞")
            if wh not in warehouse_data:
                warehouse_data[wh] = []
            warehouse_data[wh].append((art, name, qty))

        if not warehouse_data:
            dots_task.cancel()
            await msg.edit_text(
                "‚ùó –í—Å–µ —Å–∫–ª–∞–¥—ã –ø—É—Å—Ç—ã!",
                parse_mode="HTML"
            )
            return

        # 5. –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        import re
        m = re.match(r"^report_remains(?:_page_)?(\d+)?$", callback.data)
        page = int(m.group(1)) if m and m.group(1) else 1

        warehouses = list(warehouse_data.items())
        total = len(warehouses)
        pages = max(1, (total + PER_PAGE - 1) // PER_PAGE)
        start = (page - 1) * PER_PAGE
        end = start + PER_PAGE
        page_items = warehouses[start:end]

        # 6. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text_blocks = []
        for wh, products in page_items:
            text = f"üè¨ <b>–°–∫–ª–∞–¥:</b> {wh}\n"
            for art, name, qty in sorted(products, key=lambda x: (-x[2], x[0])):
                text += f"  ‚Ä¢ <b>{art}</b> ({name}): <b>{qty}</b> —à—Ç\n"
            text_blocks.append(text)
        final_text = "\n\n".join(text_blocks)
        final_text += f"\n\n<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {pages}</b>"

        kb = build_pagination_keyboard(
            total=total,
            page=page,
            per_page=PER_PAGE,
            prefix="report_remains_page_",
            back_callback="main_reports",
            add_export=True  # <--- –≤–æ—Ç —Ç—É—Ç!


        )

        # 7. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ç–æ—á–µ–∫ –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        dots_task.cancel()
        await msg.edit_text(final_text, reply_markup=kb, parse_mode="HTML")

    except Exception as e:
        dots_task.cancel()
        await msg.edit_text(f"‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

async def animate_dots(msg):
    dots = ["‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç.", "‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç..", "‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç..."]
    i = 0
    while True:
        await asyncio.sleep(0.7)
        try:
            await msg.edit_text(dots[i % 3], parse_mode="HTML")
        except Exception:
            break
        i += 1
from aiogram.types.input_file import BufferedInputFile
import csv
import io

@router.callback_query(F.data == "report_remains_export_csv")
async def report_remains_export_csv(callback: CallbackQuery):
    user_id = callback.from_user.id

    progress_msg = await callback.message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º CSV-–æ—Ç—á—ë—Ç...", parse_mode="HTML")
    api_key = await get_user_api_key(user_id)
    if not api_key:
        await progress_msg.edit_text(
            "‚ùó –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º API-–∫–ª—é—á.",
            parse_mode="HTML"
        )
        return

    try:
        items = await get_stocks(api_key)
    except Exception as e:
        await progress_msg.edit_text(
            f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏.\n–û—à–∏–±–∫–∞: {e}",
            parse_mode="HTML"
        )
        return

    stocks = [item for item in items if item.get("quantity", 0) > 0]
    if not stocks:
        await progress_msg.edit_text(
            "‚ùó –û—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            parse_mode="HTML"
        )
        return

    # --- –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∫–ª–∞–¥–∞–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ Telegram-style CSV ---
    warehouse_data = {}
    for item in stocks:
        wh = item.get("warehouseName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        art = item.get("supplierArticle", "–ë–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞")
        name = item.get("subject", "–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞")
        qty = item.get("quantity", 0)
        if wh not in warehouse_data:
            warehouse_data[wh] = []
        warehouse_data[wh].append((art, name, qty))

    # --- –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ñ–æ—Ä–º–∞—Ç—É: "–°–∫–ª–∞–¥", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–û—Å—Ç–∞—Ç–æ–∫"
    output = io.StringIO()
    writer = csv.writer(output, delimiter=';')
    writer.writerow(["–°–∫–ª–∞–¥", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–û—Å—Ç–∞—Ç–æ–∫"])
    for wh, products in warehouse_data.items():
        for idx, (art, name, qty) in enumerate(products):
            row = [
                wh if idx == 0 else "",
                art,
                name,
                qty
            ]
            writer.writerow(row)
    output.seek(0)
    csv_bytes = b'\xef\xbb\xbf' + output.getvalue().encode("utf-8")
    csv_file = BufferedInputFile(csv_bytes, filename="remains_report.csv")

    await callback.message.answer_document(
        document=csv_file,
        caption="üóÇ –í–∞—à –æ—Ç—á—ë—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV."
    )
    await progress_msg.edit_text("‚úÖ CSV-–æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", parse_mode="HTML")
